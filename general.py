import pandas as pd
import streamlit as st

@st.cache_data
def cargar_datos(year):
    return pd.read_csv(f"df_players_{year[2:]}.csv")

@st.cache_data
def obtener_clubes_y_nacionalidades(df):
    clubes = sorted(df["club_name"].dropna().unique())
    nacionalidades = sorted(df["nationality_name"].dropna().unique())
    return clubes, nacionalidades

def seccion_inicio():
    st.title("‚öΩ Football Analytics Hub")
    st.markdown("---")

    st.markdown("""
    ### Bienvenido al centro definitivo de an√°lisis futbol√≠stico üéØ

    Sum√©rgete en una experiencia interactiva dise√±ada para **fan√°ticos, analistas y amantes del f√∫tbol**.
    Esta plataforma combina estad√≠sticas detalladas, visualizaciones impactantes y comparativas inteligentes 
    para ofrecerte un recorrido completo por el universo del f√∫tbol moderno.

    üîç **¬øQu√© puedes hacer aqu√≠?**

    - Explora m√°s de mil jugadores con sus **estad√≠sticas generales, t√©cnicas y econ√≥micas**.
    - **Compara cara a cara** a tus futbolistas favoritos y descubre qui√©n domina en cada m√©trica.
    - Consulta los **Top Rankings** por posici√≥n, nacionalidad, club, valor de mercado, salario, altura y mucho m√°s.
    - Participa en **curiosidades, preguntas futboleras** y pronto... ¬°en nuestros quizes!
    - Navega por gr√°ficas exclusivas y descubre patrones que van m√°s all√° de los n√∫meros.
    - Sum√©rgete en la **trayectoria hist√≥rica de Messi y Cristiano Ronaldo**, una rivalidad legendaria analizada como nunca antes.

    üìä Cada secci√≥n ha sido pensada para **impresionar a los apasionados**, facilitar el an√°lisis a los expertos, 
    y sobre todo, **maravillar a quienes aman este deporte**.

    ---
    """)
    
    st.success("‚ö† Consejo: Usa las pesta√±as, filtros y visualizaciones para personalizar tu experiencia.")
    st.markdown("üëâ ¬°Comienza a explorar en el men√∫ de la izquierda!")

def formato(valor, is_wage):
    if pd.isna(valor):
        return " "
    else:
        valor_numerico = str(int(valor * 52)) if is_wage else str(int(valor))
        match len(valor_numerico):
            case 9: return f"{valor_numerico[:3]} M"
            case 8: return f"{valor_numerico[:2]} M"
            case 7: return f"{valor_numerico[0]} M"
            case 6: return f"{valor_numerico[:3]} mil"
            case 5: return f"{valor_numerico[:2]} mil"
            case 4: return f"{valor_numerico[0]} mil"
            case _:  return valor_numerico

def is_nulo(valor, texto_si_nulo=" "):
    if pd.isna(valor):
        return texto_si_nulo
    return int(valor)

def traducir_pie_preferente(valor):
    if isinstance(valor, str):
        if valor.lower() == "left":
            return "Izquierda"
        elif valor.lower() == "right":
            return "Derecha"
    return "Desconocido"

# Jugador

def datosJugador(player):
    st.empty()
    st.metric("Nombre Completo", value=player["long_name"])
    st.metric("Alias", value=player["short_name"])
    st.metric("Nacionalidad", value=player["nationality_name"])
    col1, col2, col3 = st.columns(3)
    col1.metric("Edad", value=player["age"])
    col2.metric("Altura (cm)", value=player["height_cm"])
    col3.metric("Peso (kg)", value=player["weight_kg"])

def metricasJugador(player):
    st.metric("Nombre del Club", value=player["club_name"])
    col1, col2 = st.columns(2)
    col1.metric("Posici√≥n", value=player["club_position"])
    col1.metric("Salario Anual", value=formato(player["wage_eur"], True))
    col1.metric("Valuaci√≥n", value=formato(player["value_eur"], False))
    col2.metric("N√∫mero", value=int(player["club_jersey_number"]))
    col2.image(player["club_logo_url"], width=75)
    col2.metric("Pie Preferente", value=traducir_pie_preferente(player["preferred_foot"]))

def metricas_avanzadas_jugador(player):
    st.subheader("üìä M√©tricas Avanzadas")

    col_m1, col_m2 = st.columns(2)

    # --- M√©tricas Generales ---
    with col_m1:
        st.markdown("**üß† M√©tricas Generales**")
        subcol1, subcol2 = st.columns(2)
        with subcol1:
            st.metric("General", value=is_nulo(player.get("overall"), " "))
            st.metric("Potencial", value=is_nulo(player.get("potential"), " "))
            st.metric("Ritmo", value=is_nulo(player.get("pace"), " "))
            st.metric("Tiro", value=is_nulo(player.get("shooting"), " "))
        with subcol2:
            st.metric("Fisico", value=is_nulo(player.get("physic"), " "))
            st.metric("Pase", value=is_nulo(player.get("passing"), " "))
            st.metric("Regate", value=is_nulo(player.get("dribbling"), " "))
            st.metric("Defensa", value=is_nulo(player.get("defending"), " "))
        st.button("Anterior Jugador", on_click=lambda: cambiar_jugador(-1))
    # --- Habilidades T√©cnicas ---
    with col_m2:
        st.markdown("**üéØ Habilidades T√©cnicas**")
        subcol3, subcol4 = st.columns(2)
        with subcol3:
            st.metric("Dribbling", value=player.get("skill_dribbling"))
            st.metric("Efecto", value=player.get("skill_curve"))
            st.metric("Control de Bal√≥n", value=player.get("skill_ball_control"))
            st.metric("Agilidad", value=player.get("movement_agility"))
        with subcol4:
            st.metric("Reacciones", value=player.get("movement_reactions"))
            st.metric("Potencia de Tiro", value=player.get("power_shot_power"))
            st.metric("Salto", value=player.get("power_jumping"))
        st.button("Siguiente Jugador", on_click=lambda: cambiar_jugador(1))

# Comparador

def mostrar_jugador_comparador(player):
    st.markdown(
        f"""
        <div style="text-align: center;">
            <img src="{player['player_face_url']}" width="150">
        </div>
        """,
        unsafe_allow_html=True
    )
    st.subheader(player["long_name"])
    st.caption(player["short_name"])

def comparar_metricas(j1, j2):
    metricas_generales = ["overall", "potential", "pace", "shooting", 
                          "passing", "dribbling", "defending", "physic"]
    metricas_habilidades = ["skill_dribbling", "skill_curve", "skill_ball_control",
                            "movement_agility", "movement_reactions", "power_shot_power", "power_jumping"]
    traduccion = {
    "overall": "General",
    "potential": "Potencial",
    "pace": "Ritmo",
    "shooting": "Tiro",
    "passing": "Pase",
    "dribbling": "Regate",
    "defending": "Defensa",
    "physic": "F√≠sico",
    "skill_dribbling": "Regate (Habilidad)",
    "skill_curve": "Efecto",
    "skill_ball_control": "Control de bal√≥n",
    "movement_agility": "Agilidad",
    "movement_reactions": "Reacciones",
    "power_shot_power": "Potencia de tiro",
    "power_jumping": "Salto" }

    col1, col2 = st.columns(2)

    with col1:
        mostrar_jugador_comparador(j1)
    with col2:
        mostrar_jugador_comparador(j2)

    st.markdown("---")
    st.markdown("### M√©tricas Generales üß†")

    for metrica in metricas_generales:
        v1 = j1[metrica]
        v2 = j2[metrica]

        col1, col2 = st.columns(2)

        label_es = traduccion.get(metrica, metrica)

        if pd.notna(v1) and pd.notna(v2):
            delta1 = int(v1) - int(v2)
            delta2 = int(v2) - int(v1)

            with col1:
                st.metric(label=label_es, value=int(v1), delta=f"{delta1:+}", delta_color="normal")
            with col2:
                st.metric(label=label_es, value=int(v2), delta=f"{delta2:+}", delta_color="normal")
        else:
            with col1:
                st.metric(label=label_es, value="No aplica")
            with col2:
                st.metric(label=label_es, value="No aplica")

    st.markdown("---")
    st.markdown("### Habilidades T√©cnicas üéØ")

    for metrica in metricas_habilidades:
        v1 = j1[metrica]
        v2 = j2[metrica]

        col1, col2 = st.columns(2)

        label_es = traduccion.get(metrica, metrica)

        if pd.notna(v1) and pd.notna(v2):
            delta1 = int(v1) - int(v2)
            delta2 = int(v2) - int(v1)

            with col1:
                st.metric(label=label_es, value=int(v1), delta=f"{delta1:+}", delta_color="normal")
            with col2:
                st.metric(label=label_es, value=int(v2), delta=f"{delta2:+}", delta_color="normal")
        else:
            with col1:
                st.metric(label=label_es, value="No aplica")
            with col2:
                st.metric(label=label_es, value="No aplica")

# Tops

def mostrar_tops(df):
    st.divider()

    # --- Filtros ---
    col1, col2, col3 = st.columns(3)

    clubes, nacionalidades = obtener_clubes_y_nacionalidades(df)
    with col1:
        nacionalidad = st.selectbox("Filtrar por Nacionalidad", ["Todas"] + nacionalidades)
    with col2:
        club = st.selectbox("Filtrar por Club", ["Todos"] + clubes)
    with col3:
        posicion = st.selectbox("Filtrar por Posici√≥n", ["Todas"] + sorted(df["club_position"].dropna().unique()))

    if nacionalidad != "Todas":
        df = df[df["nationality_name"] == nacionalidad]
    if club != "Todos":
        df = df[df["club_name"] == club]
    if posicion != "Todas":
        df = df[df["club_position"] == posicion]

    # --- M√©tricas disponibles y traducci√≥n ---
    metricas = {
        "overall": "General",
        "potential": "Potencial",
        "pace": "Ritmo",
        "shooting": "Tiro",
        "passing": "Pase",
        "dribbling": "Regate",
        "defending": "Defensa",
        "physic": "F√≠sico",
        "skill_dribbling": "Habilidad Regate",
        "skill_curve": "Efecto",
        "skill_ball_control": "Control de Bal√≥n",
        "movement_agility": "Agilidad",
        "movement_reactions": "Reacciones",
        "power_shot_power": "Potencia de Tiro",
        "power_jumping": "Salto",
        "wage_eur": "Salario Anual",
        "value_eur": "Valuaci√≥n",
        "height_cm": "Altura (cm)"
    }

    metrica_traducida = st.selectbox("Selecciona una m√©trica para ver el Top", list(metricas.values()))
    metrica_seleccionada = [k for k, v in metricas.items() if v == metrica_traducida][0]

    # Opci√≥n de visualizaci√≥n
    vista = st.radio("¬øC√≥mo deseas ver el Top?", ["Tarjetas", "Tabla"], horizontal=True)

    # Cantidad (solo si es tabla)
    cantidad = 10
    if vista == "Tabla":
        cantidad = st.selectbox("Cantidad de jugadores a mostrar", [10, 25, 50, 100])

    # Preparar top
    df_top = df.copy()
    df_top = df_top[df_top[metrica_seleccionada].notna()]
    df_top = df_top.sort_values(by=metrica_seleccionada, ascending=False).head(cantidad)

    # Determinar si se debe aplicar formato
    aplicar_formato = metrica_seleccionada in ["value_eur", "wage_eur"]
    is_wage = metrica_seleccionada == "wage_eur"

    # Visualizaci√≥n seleccionada
    if vista == "Tabla":
        st.subheader("üìã Tabla del Top 10")
        valores = [
            formato(valor, is_wage) if aplicar_formato else int(valor)
            for valor in df_top[metrica_seleccionada]
        ]
        # Nuevo Dataframe formateado
        df_tabla = pd.DataFrame({
            "Nombre": df_top["long_name"],
            "Club": df_top["club_name"],
            "Nacionalidad": df_top["nationality_name"],
            metrica_traducida: valores
        })
        df_tabla.index = range(1, len(df_tabla) + 1)
        st.dataframe(df_tabla, use_container_width=True)
    else:
        st.subheader("üì∏ Tarjetas de Jugadores")
        for _, jugador in df_top.iterrows():
            valor = jugador[metrica_seleccionada]
            valor_mostrar = formato(valor, is_wage) if aplicar_formato else int(valor)
            with st.container():
                col1, col2 = st.columns([1, 3])
                with col1:
                    st.image(jugador["player_face_url"], width=300)
                with col2:
                    st.subheader(jugador["long_name"])
                    st.caption(f"{jugador['nationality_name']} | {jugador['club_name']} | {jugador['club_position']}")
                    st.metric(label=metrica_traducida, value=valor_mostrar)

# Curiosidades
def seccion_curiosidades(df):
    with st.expander("Datos interesantes del dataset"):
        st.markdown("- ‚öΩ ¬øSab√≠as que el jugador m√°s alto mide m√°s de **2 metros**?")
        st.markdown(f"- üí∞ El jugador con **mayor valor de mercado** es: **{df.loc[df['value_eur'].idxmax(), 'short_name']}**")
        st.markdown(f"- üë∂ El jugador m√°s joven tiene apenas **{df['age'].min()} a√±os**.")
        st.markdown(f"- üèÜ El pa√≠s con m√°s jugadores registrados es: **England**")
        st.markdown(f"- ü•æ El jugador con mejor 'Regate' es: **{df.loc[df['dribbling'].idxmax(), 'short_name']}** con {int(df['dribbling'].max())} puntos.")
        st.markdown(f"- üöÄ El m√°s veloz tiene **{int(df['pace'].max())}** puntos de velocidad: **{df.loc[df['pace'].idxmax(), 'short_name']}**.")
        st.markdown(f"- üß± El defensor con mayor 'Defensa' tiene **{int(df['defending'].max())}**: **{df.loc[df['defending'].idxmax(), 'short_name']}**.")

    st.info("¬°Descubre m√°s en la secci√≥n de gr√°ficas!")

# Preguntas (FAQ)
def seccion_faq():
    st.subheader("‚ùì Preguntas Frecuentes")

    with st.expander("¬øQu√© significa cada tipo de m√©trica?"):
        st.markdown("#### M√©tricas Generales")
        st.write("- **General (overall)**: Nivel actual del jugador.")
        st.write("- **Potencial (potential)**: Nivel m√°ximo estimado del jugador.")
        st.write("- **F√≠sico (physic)**: Fuerza y resistencia f√≠sica.")
        st.write("- **Velocidad (pace)**: Aceleraci√≥n y velocidad m√°xima.")

        st.markdown("#### M√©tricas T√©cnicas")
        st.write("- **Tiro (shooting)**: Capacidad para disparar a porter√≠a.")
        st.write("- **Pase (passing)**: Precisi√≥n y capacidad de pase.")
        st.write("- **Defensa (defending)**: Habilidad para recuperar y bloquear.")
        st.write("- **Regate (dribbling)**: Habilidad para controlar el bal√≥n en movimiento.")

        st.markdown("#### M√©tricas de Habilidad")
        st.write("- **Control de bal√≥n (skill_ball_control)**: Dominio general del bal√≥n.")
        st.write("- **Efecto (skill_curve)**: Precisi√≥n al curvar la pelota.")
        st.write("- **Habilidad de Regate (skill_dribbling)**: Capacidad para regatear.")
        st.write("- **Agilidad (movement_agility)**: Rapidez para cambiar de direcci√≥n.")
        st.write("- **Reacci√≥n (movement_reactions)**: Tiempo de respuesta a jugadas.")
        st.write("- **Potencia de tiro (power_shot_power)**: Fuerza en los disparos.")
        st.write("- **Salto (power_jumping)**: Capacidad para elevarse.")

    with st.expander("¬øQu√© es el 'Potencial' y c√≥mo se diferencia del 'General'?"):
        st.write(
            "- **General** representa el nivel actual del jugador.\n"
            "- **Potencial** indica el nivel m√°ximo que puede alcanzar, seg√∫n una estimaci√≥n."
        )

    with st.expander("¬øPor qu√© algunos jugadores no tienen datos de ciertas m√©tricas?"):
        st.write(
            "Algunas posiciones, como la de portero, no requieren ciertos atributos como "
            "pase, velocidad o regate, por lo que esos valores pueden estar vac√≠os o no aplican."
        )

    with st.expander("¬øQu√© representa el valor de mercado (valuaci√≥n)?"):
        st.write(
            "Es una estimaci√≥n del valor econ√≥mico del jugador en el mercado de fichajes, "
            "basado en edad, habilidad y potencial. No es lo mismo que el salario."
        )

    with st.expander("¬øPor qu√© un mismo jugador aparece en varios a√±os?"):
        st.write(
            "Porque los datos corresponden a distintas ediciones, y muestran c√≥mo "
            "evoluciona el rendimiento y el valor de un jugador a lo largo del tiempo."
        )

def cambiar_jugador(delta):
    st.session_state['jugador_actual_index'] = (st.session_state['jugador_actual_index'] + delta) % st.session_state['limit']

# Acerca de...
def seccion_acerca():
    st.header("üìò Acerca de esta Aplicaci√≥n")
    st.markdown("---")
    st.markdown("""
    En esta secci√≥n encontrar√°s la **documentaci√≥n t√©cnica y explicativa** de todo el proceso detr√°s de esta plataforma. 
    Desde el an√°lisis y transformaci√≥n de datos hasta c√≥mo se visualiza cada apartado.
    
    Cada expander a continuaci√≥n detalla el **trabajo realizado en cada secci√≥n** de la app.
    """)

    with st.expander("üìÇ 1. Carga y Preparaci√≥n de Datos"):
        st.markdown("""
        - **An√°lisis:** Se recolectaron datasets desde FIFA 15 hasta FIFA 22, centrando el an√°lisis en jugadores con informaci√≥n suficiente.
        - **Transformaci√≥n:** 
            - Se estandarizaron nombres, posiciones y columnas relevantes.
            - Se unieron m√∫ltiples CSVs en estructuras por jugador o a√±o para trayectorias.
            - Se tradujeron m√©tricas y se normalizaron datos monetarios (salario y valuaci√≥n).
        - **Resultado:** Se obtuvo un dataframe limpio y estructurado, con columnas clave como estad√≠sticas generales, t√©cnicas, econ√≥micas y f√≠sicas.
        """)

    with st.expander("üë§ 2. Secci√≥n: Jugador"):
        st.markdown("""
        - **Funcionalidad:** B√∫squeda por nombre y despliegue de informaci√≥n detallada.
        - **Visualizaci√≥n:** Imagen, nombre, m√©tricas generales, t√©cnicas y econ√≥micas.
        - **Transformaciones aplicadas:** 
            - Formateo personalizado para salarios y valores.
            - Traducci√≥n de columnas (ej. `preferred_foot` a "Izquierda"/"Derecha").
        - **Resultado:** Vista centrada y visualmente ordenada del rendimiento e informaci√≥n del jugador.
        """)

    with st.expander("ü§úü§õ 3. Secci√≥n: Comparador"):
        st.markdown("""
        - **Funcionalidad:** Comparar dos jugadores por nombre.
        - **Visualizaci√≥n:** Imagen, nombre y m√©tricas enfrentadas.
        - **L√≥gica especial:** 
            - Se usaron `st.metric` con flechas verde/roja/gris seg√∫n qui√©n supera en cada m√©trica.
            - Se control√≥ que no se comparen m√©tricas inexistentes (como porteros en velocidad).
        - **Resultado:** Comparaciones intuitivas y √∫tiles para elegir entre dos talentos.
        """)

    with st.expander("üìä 4. Secci√≥n: Tops"):
        st.markdown("""
        - **Funcionalidad:** Mostrar rankings por m√©trica seleccionada.
        - **Filtros:** Nacionalidad, posici√≥n, club.
        - **Visualizaci√≥n:** Tarjetas o tabla seg√∫n preferencia del usuario.
        - **Transformaciones destacadas:** 
            - Formateo monetario con funci√≥n `formato()`.
            - Traducci√≥n de m√©tricas.
            - Tablas ordenadas con √≠ndice que inicia en 1.
        - **Resultado:** Rankings din√°micos, claros y visualmente atractivos.
        """)

    with st.expander("üß† 5. Secci√≥n: Preguntas & Curiosidades"):
        st.markdown("""
        - **Objetivo:** Educar y entretener al usuario con contenido futbolero.
        - **Contenido:** 
            - FAQ (significado de m√©tricas, conceptos como potencial y general).
            - Curiosidades (top clubes con m√°s jugadores, nacionalidades dominantes).
        - **Resultado:** Una secci√≥n educativa que enriquece el an√°lisis con contexto.
        """)

    with st.expander("üìà 6. Secci√≥n: Gr√°ficas"):
        st.markdown("""
        - **Gr√°ficos incluidos:** Barras, dispersi√≥n, histogramas y pronto radar.
        - **Opciones del usuario:** 
            - Elegir qu√© m√©trica graficar.
            - Filtros avanzados.
        - **C√°lculos cacheados:** Optimizaci√≥n mediante funciones decoradas con `@st.cache`.
        - **Resultado:** Visualizaci√≥n rica en insights sobre la distribuci√≥n y relaciones de los datos.
        """)

    with st.expander("üìÜ 7. Secci√≥n: Trayectoria"):
        st.markdown("""
        - **Jugadores:** Messi y Cristiano Ronaldo entre 2015 y 2022.
        - **An√°lisis:** 
            - Se preprocesaron y unieron los datos por a√±o.
            - Se construy√≥ una tabla resumen (a√±os como columnas, m√©tricas como filas).
            - Visualizaciones de evoluci√≥n por a√±o, valor econ√≥mico, t√©cnica y progresi√≥n/regresi√≥n.
        - **Resultado:** Un seguimiento hist√≥rico y visualmente atractivo de dos leyendas del f√∫tbol.
        """)

    st.info("üìå Cada secci√≥n ha sido cuidadosamente dise√±ada para balancear an√°lisis t√©cnico, est√©tica y utilidad pr√°ctica.")
